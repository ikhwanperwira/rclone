name: Test Trash Feature

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      manual:
        description: Manual test run
        type: boolean
        default: true

concurrency:
  group: test-trash-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test-trash-feature:
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.23']

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo modprobe fuse
        sudo chmod 666 /dev/fuse
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse-dev

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install --cask macfuse

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y winfsp

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: go mod download

    - name: Build rclone with trash feature (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Starting build at $(date)"
        echo "Available memory:"
        free -h || true
        echo "Go version: $(go version)"
        echo "Starting Go build with reduced verbosity..."
        # Build with less verbose output to reduce log size and potential timeout issues
        go build -trimpath -ldflags "-s -X github.com/rclone/rclone/fs.Version=trash-feature-$(git rev-parse --short HEAD)" .
        echo "Build completed at $(date)"

    - name: Build rclone with trash feature (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        echo "Starting build at $(Get-Date)"
        echo "Go version: $(go version)"
        echo "Starting Go build..."
        go build -trimpath -ldflags "-s -X github.com/rclone/rclone/fs.Version=trash-feature-$(git rev-parse --short HEAD)" .
        echo "Build completed at $(Get-Date)"

    - name: Check binary size (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Binary size information:"
        ls -lh rclone
        echo "Size in MB: $(du -m rclone | cut -f1)"

    - name: Check binary size (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        echo "Binary size information:"
        Get-Item rclone.exe | Format-List Name, Length
        $sizeInMB = [math]::Round((Get-Item rclone.exe).Length / 1MB, 2)
        echo "Size in MB: $sizeInMB"

    - name: Test trash flag availability (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Testing if --trash-dir flag is available..."
        if ./rclone mount --help | grep -q "trash-dir"; then
          echo "✅ SUCCESS: --trash-dir flag found in help output"
        else
          echo "❌ FAIL: --trash-dir flag not found in help output"
          exit 1
        fi

    - name: Test trash flag availability (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo Testing if --trash-dir flag is available...
        rclone.exe mount --help | findstr "trash-dir" >nul
        if %errorlevel% == 0 (
          echo ✅ SUCCESS: --trash-dir flag found in help output
        ) else (
          echo ❌ FAIL: --trash-dir flag not found in help output
          exit /b 1
        )

    - name: Show trash flag help (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Showing trash-dir flag documentation:"
        ./rclone mount --help | grep -A 2 -B 2 "trash-dir" || true

    - name: Show trash flag help (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo Showing trash-dir flag documentation:
        rclone.exe mount --help | findstr /C:"trash-dir" || echo No additional context found

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rclone-trash-feature-${{ matrix.os }}
        path: |
          rclone*
          !rclone_test.exe
        retention-days: 3
